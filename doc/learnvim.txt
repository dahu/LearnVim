*learnvim.txt*  A Suggested Path for Learning Vim

This help file introduces fundamental concepts, offers concrete advice for
correctly configuring a new Vim instance and outlines a progressive set of
topics for the enthusiastic newcomer to study and practise.

This is not a typical tutorial for Vim in that many topics are merely
introduced here with further study deferred to the excellent Vim Reference
Guide (|reference_toc|) and User Manual (|usr-toc|).

This file is structured with the following conventions:

CHAPTER HEADINGS are all caps and preceded by a line of # characters.
SECTIONS within a Chapter are all caps and preceded by a line of = characters.
1. Topics within a Section are numbered, in Title Case.
Recipes are blocked in lines of - characters.

##############################################################################
THE VIM LEARNING PATH                             *learnvim-path-overview*

|learnvim-Beginner|
|learnvim-Intermediate|
|learnvim-Moderate|
|learnvim-Advanced|

Extras~

|learnvim-Plugins|
|learnvim-External-Resources|

##############################################################################
BEGINNER TOPICS                                 *lv_B* *learnvim-Beginner*

Competencies ~

On completing this section, you will:

|lv_B_I|	Be able to use Vim's extensive help system.

|lv_B_II|	Know where to find fundamental information on using Vim along
		with a legend on understanding how that information is
		presented.

|lv_B_III|	Know where the various configuration files for Vim are
		located, what each one is responsible for, and how to set
		options to control Vim's behaviour and customise its interface.

|lv_B_IV|	Have created your own vimrc and gvimrc configuration files.

==============================================================================
USING HELP                                 *lv_B_I* *learnvim-Using-Help*

Vim's internal help system is comprehensive, well indexed and easy to
navigate.  Beginners however often have difficulty knowing what to search for
in the first place.  Several solutions to that problem are provided here.
First is a guided tour of how to use Vim's help system.  Second is a broader
way to search for information within the help system.

1. Learning how to use Vim's Help        *learnvim-essential-introduction*

To read a help topic, move your cursor to that topic and type |ctrl-]|.  To
return to where you came from, type |ctrl-t|.  Try that now by reading the
next three essential (and brief) help topics.  You will think I jest when I
say that a 200 line help file is brief, but I don't actually want you to read
-all- of that file -- just the first section.  Sections are shown in red (with
the default colour scheme) and are usually right-aligned.

|help.txt|	A quick overview of navigating Vim's help system.  Read
                everything in the first section - about 10 lines, and then
		jump back here.

		Note: that same help file is shown if you type the   |:help|
		      command without a topic.

|help-context|	A list of topic prepositions to specify the context of your
		help search.  Again, this is only about 10 lines long.

		Note: The astute reader will notice that not only does it come
		      from the same file (|help.txt|) as the previous section
		      I asked you to read, but it was the very next section!
		      Why didn't I just ask you to keep reading through that
		      file while you were there? Because practising to
		      navigate Vim's help system is the most important skill
		      you first need to learn in mastering Vim.

|notation|	An explanation of how information is presented in the help
		files. -Now- I'm asking you to read 200+ lines in all of
		Section 4 of |intro.txt|.  Actually, you can get away with
		skimming this one - but make sure you get a feel for how Vim's
		help files are layed out.

		Note: You may think that something so usefully named as
		      'intro.txt' should well be read in full.  If you're into
		      reading gobs of documentation, go hard.  However, to save
		      you time and trouble, this section of LearnVim has what
		      is considered to be the essential knowledge you need at
		      this stage.

2. Trees Within The Forest                  *learnvim-take-apart-commands*

When newcomers see "complicated" commands in a Vim script or someone else's
vimrc and try to search for them in the help system, they often fail to find
what they're looking for.  Take for example the command sequence   gqip   to
reformat a paragraph.  Doing   :help gqip   will return the depressing
message, "Sorry, no help for gqip".  The problem here is in understanding
Vim's command syntax: |gq| and |ip| are separate entities. |gq| is an operator
command (one that takes a |motion|), whereas |ip| is an object (|text-object|
to be precise).  The take-away here is this tip: Learn to 'take apart'
commands you see in Vim.  See |learnvim-namenclature| for more tips on
recognising and understanding Vim elements.

3. Broadening Your Search                     *learnvim-expand-help-terms*

Use the ctrl-d key when you're typing ":help <term>".  It will list matches
for the term in front of the cursor.  See |c_CTRL-D| for additional uses.

Another useful key is <Tab> which also expands terms on the Vim command line.
Depending on your settings ('wildmode' and 'wildmenu'), <Tab> will either
cycle through available matches or show a similar list to ctrl-d (and allow
you to cycle through that list).

4. The Shotgun Approach                                *learnvim-helpgrep*

Sometimes you don't know the exact search term you should be using to find
what you need in the help files.  It can be frustrating trying to guess the
precise turn of phrase the help-file author tagged.  Of course, it's obvious
when you get there, but just like a good joke: until you hear the punch-line,
you would never have guessed it would end like that.

To search the help system and return all matches, use the |:helpgrep| command.

Recipe: Using helpgrep to broaden your search   *learnvim-recipe-helpgrep*
-------------------------------------------------------------------------{{{1
Problem: ~

You want to search by hexadecimal value, for example the character represented
by the value 0xAE (the Â® symbol).  You've tried:
>
	:help hexadecimal
	:help hex
	:help search
	:help / and then searching within the help file for "hex"
<
If you had persisted in searching for subsequent matches in the last attempt,
you would have eventually found a table of |/character-classes| in which the
answer to your problem does indeed lie.  In itself, that is not a bad thing,
and it really didn't take too long to find the answer.  However, knowing that
you should have jumped into the help system with :help /character-classes is
by no means intuitive to the newcomer.

Solution: ~
>
	:helpgrep hex
	:cwindow
	/search

Produces: ~
>
	version7.txt|1018 col 48| |/\%x| \%x1a		search for character with 2 pos. hex number
	version7.txt|1020 col 50| |/\%u| \%u12ab	search for character with 4 pos. hex number
	version7.txt|1022 col 53| |/\%U| \%U1234abcd	search for character with 8 pos. hex number
<
Comments: ~

Admittedly, the information in the version_n_.txt files would probably not be
your primary resource, but it gives a good answer in this case.  The point is,
you can navigate the quickfix window for the answer you're seeking.  All the
normal Vim navigation methods are available, including hjkl, ctrl-f/ctrl-b,
and the method used here, searching with /.  Pressing <enter> on one of the
quickfix lines will open the corresponding file and place the cursor on the
associated line.

Note: Because this helpfile describes this process, the quickfix window will
have entries from here, and because "learnvim" precedes "version",
alphabetically, you will need to repeat your search several times (use the  n
key) to jump past the learnvim entries.
-------------------------------------------------------------------------1}}}

5. More Resources                           *learnvim-community-resources*

The Vim community is strong, helpful and polite.  The vim.wikia.com site, IRC
channel and mailing list are all great sources of information in learning Vim:

* http://vim.wikia.com/wiki/Learn_to_use_help
* Mailing Lists - http://www.vim.org/community.php
* IRC channel #vim on irc://irc.freenode.net

==============================================================================
THE FUNDAMENTALS OF VIM          *lv_B_II* *learnvim-Fundamental-Concepts*

1. Climbing the Vim Learning Curve                   *learnvim-beginnings*

Vim has a steep learning curve that will take several days or weeks to even
begin turning from vertical.  Here is a good place to start:

|tutor|		The vimtutor is an interactive tutorial which teaches the
		fundamentals of Vim in around 30 minutes of hands-on fun.

|quickref|	Vim's Quick Reference:  An awesome overview and cheat-sheet.
		Of particular interest are the |option-list|, text objects
		(|Q_to|) and pattern search summary (|Q_pa|).

|vim-modes|	Vim is a modal editor.  Understanding the consequences and
		advantages of that is essential to mastering Vim.  Be sure to
		read the subsequent section on |mode-switching| too.

|user-manual|	The Table of Contents for Vim's User Manual.

There are also some really good Beginner Tutorials available online for Vim:

* http://blog.interlinked.org/tutorials/vim_tutorial.html
* http://www.derekwyatt.org/vim/vim-tutorial-videos/vim-novice-tutorial-videos/

Note: That's not a typing mistake in the first link above.  It -is- a vi
tutorial! Vim came from vi, so many of Vim's fundemental editing features are
also available in vi.

2. Definitions                                *learnvim-basic-definitions*

screen		The whole area that Vim uses to work in.  This can be a
		terminal emulator window.  Also called "the Vim window".

buffer		A buffer is just the word for the contents of a file.  Each
		buffer may be associated with one file path (the file it will
		be written to when you :w).  A buffer might not have an
		associated file path (like the empty buffer you get when you
		first start Vim).

window		A window is a place where a buffer can be displayed.  There is
		always at least one window open.  A buffer can be displayed in
		any number of windows simultaneously.  Having a buffer that
		isn't displayed in a window is useful when switching between
		different tasks, letting you walk away from half-finished
		work (See |'hidden'|).  Having a buffer that is displayed in two
		windows can be useful when trying to work on one part of the
		buffer based upon some context provided in another part of the
		buffer that's far away.

tab page	A tab page is a place to put a group of windows.  There is
		always at least one tab page open.  Each tab must always have
		at least one window in it.  The maximum number of windows is
		bounded only by the size of the Vim window.

Note: Trying to create a one-to-one relationship between tab pages and buffers
      is asking for trouble.  Lots of Vim commands change the buffer displayed
      in the current window, and some others create a new window in the
      current tab page.  Trying to lock a buffer to a single window inside a
      single tab page won't work; at least, not without cutting you off from
      many useful commands.

2. Namenclature                                *learnvim-namenclature*

Like any large and complex system, Vim has a dense vocabulary of terms
surrounding its interface, operation and configuration.  Understanding this
terminology is essential for you to make significant progress in learning Vim.

When you see:		It means:

<CR>			Carriage Return, specifically, but realise that this
			is how Vim and vimmers talk about special keys in Vim.
			For example, the Escape key is written as <Esc>.  See
			|keycodes| for a list of these special keys.

i_CTRL-G_j		This term consists of three separate parts.  The
			leading i_ tells us this key is used in insert mode.
			Find more about these in |help-context|.  The CTRL-g
			tells us the first key to type and the _j tells us
			that this is a key sequence, and that we should type
			j   after the CTRL-g.

==============================================================================
CONFIGURING VIM                      *lv_B_III* *learnvim-Configuring-Vim*

Vim has many options which can be set at runtime or put in configuration files
to make them permanent.

1. Files                                    *learnvim-configuration-files*

/usr/share/vim/vimrc	The system-wide configuration file for both terminal
			and GUI Vim.  This file is used only if the user does
			not have a personal $HOME/.vimrc file.

/usr/share/vim/gvimrc	The system-wide configuration file for GUI Vim.  This
			file is used only if the user does not have a personal
			$HOME/.gvimrc file

$HOME/.vimrc		Personal configuration file for both terminal and GUI
			Vim.  You should create your own $HOME/.vimrc file to
			enable certain essential features, give sane values to
			important options and customise Vim to your
			preferences.  See |learnvim-vimrc| below for an
			annotated example .vimrc file you can use to get
			started.

$HOME/.gvimrc		Personal configuration file for GUI Vim.  You should
			create your own $HOME/.gvimrc file for the same
			reasons as with the .vimrc file.  The $HOME/.gvimrc
			file is also used to store GUI-specific settings like
			your GUI colorscheme, font and menu & toolbar options.
			See |learnvim-gvimrc| for an annotated example .gvimrc
			file you can use to get started.

                                        *learnvim-personal-vimrc-filename*
Note: The table above refers to the personal vimrc file as $HOME/.vimrc, and
      this is true for Linux and Mac systems, but in Windows it's located in
      $HOME/_vimrc.

2. Configuration Options                  *learnvim-configuration-options*

Vim is highly configurable through what are referred to as |options|.  Read
through the beginning of that help file to understand how to show and set
options.  As a quick overview:

- :set option=value	Sets "option" to "value"
- :set option?		Shows the current value of "option"
- :echo &option 	An alternate way to show the value of "option"

E.g. To check the current value of 'shiftwidth' and then change it to 4:
>
	:set shiftwidth?
	:set shiftwidth=4
<
To search for options in Vim, always remember to use a single quote ( ' )
character at the start of the option name to make sure your search doesn't
clash with other entries in the help system. E.g.   :help 'exp   will find the
'expandtab' option, but   :help exp   will find the |expression| evaluation
entry.  The use of help prefixes like ( ' ) is explained in |help-context|

3. GUI Option Browser                            *learnvim-option-browser*

Use the |:options| command to show an interactive window of all Vim's settings
including their current values and a brief description, grouped by function.

Recipe: Using the Options Browser to search for and change a Vim setting ~
-------------------------------------------------------------------------{{{1
Problem: ~

You want to change the bahaviour of something in Vim (like the tab & indent
settings, or how the Toolbar is displayed in the GUI), but you don't know the
option name and searching the help system doesn't appeal to you.

Solution: ~

For tabs and indents:
>
 	:options
<
Scroll down the Table of Contents and press Enter on the '15 tabs and
indenting' line.  This will jump you to the set of options controlling how Vim
manages indentation.

Likewise, for the GUI Toolbar problem:
>
 	:options
<
Scroll down or search for GUI (/GUI) and press Enter on the '10 GUI' line.

Comments: ~

Changing a value on any of the 'set' lines and pressing Enter will update your
current settings.  Add the 'set' line to your ~/.vimrc file (see
|learnvim-vimrc| below) to make the change permanent.  Actually, you should
clean up the set line by removing the initial, unset version of the option
before adding it to your ~/.vimrc file.

Example: ~

Say you're browsing the options and decide that you want to enable 'smarttab'.
You see the line:
>
 	set nosta	sta
<
If you press Enter on that line then you will enable smarttabs.  Copying that
line to your ~/.vimrc file will work, but it's unnecessary and unsightly to
have the option turned off and then on like that.  So, when adding this to your
~/.vimrc, change the line like this:
>
 	set sta
<
Actually, it is a good practice to use the full name of an option so that when
you come back to your ~/.vimrc file in six months' time you will be able to
understand what the setting means.  So, change that line to:
>
 	set smarttab
-------------------------------------------------------------------------1}}}

==============================================================================
MAKING SETTINGS PERMANENT          *lv_B_IV* *learnvim-permanent-settings*

1. Your Own vimrc File                                    *learnvim-vimrc*

Put this in your personal vimrc file (|learnvim-personal-vimrc-filename|):
>
	set nocompatible               " NEVER change this! Use Vim mode, not vi mode.
	filetype plugin indent on      " Enable automatic settings based on file type
	syntax on                      " Enable colour syntax highlighting

	""""""""""
	" Options
	""""""""""
	" Use :help 'option (including the ' character) to learn more about each one.
	"
	" Buffer (File) Options:
	set hidden                     " Edit multiple unsaved files at the same time
	set confirm                    " Prompt to save unsaved changes when exiting
	                               " Keep various histories between edits
	set viminfo='1000,f1,<500,:100,/100,h

	" Search Options:
	set hlsearch                   " Highlight searches. See below for more.
	set ignorecase                 " Do case insensitive matching...
	set smartcase                  " ...except when using capital letters
	set incsearch                  " Incremental search

	" Insert (Edit) Options:
	set backspace=indent,eol,start " Better handling of backspace key
	set autoindent                 " Sane indenting when filetype not recognised
	set nostartofline              " Emulate typical editor navigation behaviour
	set nopaste                    " Start in normal (non-paste) mode
	set pastetoggle=<f11>          " Use <F11> to toggle paste modes

	" Status / Command Line Options:
	set wildmenu                   " Better commandline completion
	set wildmode=longest:full,full " Expand match on first Tab complete
	set showcmd                    " Show (partial) command in status line.
	set laststatus=2               " Always show a status line
	set cmdheight=2                " Prevent "Press Enter" messages
	                               " Show detailed information in status line
	set statusline=%f%m%r%h%w\ [%n:%{&ff}/%Y]%=[0x\%04.4B][%03v][%p%%\ line\ %l\ of\ %L]

	" Interface Options:
	set number                     " Display line numbers at left of screen
	set visualbell                 " Flash the screen instead of beeping on errors
	set t_vb=                      " And then disable even the flashing
	set mouse=a                    " Enable mouse usage (all modes) in terminals
	" Quickly time out on keycodes, but never time out on mappings
	set notimeout ttimeout ttimeoutlen=200

	" Indentation Options:
	set tabstop=8                  " NEVER change this!
	" Change the '2' value below to your preferred indentation level
	set shiftwidth=2               " Number of spaces for
	set softtabstop=2              " ...each indent level
	set expandtab                  " Even when pressing <Tab>

	"""""""
	" Maps
	"""""""
	"
	" F1 to be a context sensitive keyword-under-cursor lookup
	nnoremap <F1> :help <C-R><C-W><CR>

	" Reformat current paragraph
	nnoremap Q gqap

	" Move cursor between visual lines on screen
	nnoremap <Up> gk
	nnoremap <Down> gj

	" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
	" which is the default
	map Y y$

	" Map <C-L> (redraw screen) to also turn off search highlighting until the
	" next search
	nnoremap <C-L> :nohl<CR><C-L>

	" Toggle search highlighting
	nnoremap <C-Bslash>       :set hls!<bar>:set hls?<CR>
	inoremap <C-Bslash>       <Esc>:set hls!<bar>:set hls?<CR>a

	""""""""""""""""
	" Auto commands
	""""""""""""""""
	"
	if has("autocmd")
	  augroup filetype
	    autocmd!              " Remove ALL autocommands for the current group.

	    " Jump to last-known-position when editing files
	    " Note: The | character is used in Vim as a command separator (like ; in C)
	    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
	  augroup END
	endif
<
2. Additional Options to Investigate   *learnvim-vimrc-additional-options*

Read about the following options and consider adding them to your $HOME/.vimrc
too:

- 'colorscheme'	See |:syn-default-override|.  There are many more themes to
 		choose from at htp://www.vim.org/scripts/

- 'whichwrap'	Control which keys allow you to wrap around start and end of
  		lines.

- 'spell' and	Enable spell checking in your preferred language.
  'spelllang'

- 'backup'	To keep backups of your files.  There are several other related
		options with "backup" in their name.


3. Your Own gvimrc File                                  *learnvim-gvimrc*

Put this in your $HOME/.gvimrc :
>
	set t_vb=                      " Disable screen flash on error
<
Note: Some options, like t_vb, need to be set in both $HOME/.vimrc and
$HOME/.gvimrc because they are reset when the GUI is started.

4. Additional Options to Investigate  *learnvim-gvimrc-additional-options*

- 'colorscheme'	If you want to have the GUI use a different scheme to terminal
		Vim.

- 'guifont'	Font (or list of fonts to try) to use in the GUI.  See the tip
		below about setting your guifont.

- 'guioptions'	Control which components and options of the GUI to use.


##############################################################################
INTERMEDIATE TOPICS                         *lv_I* *learnvim-Intermediate*

You don't need to worry about competencies anymore -- you have your Vim
Driver's license, provisional plates.  You're allowed to drive solo, but
you're still on zero tolerance conditions and cautioned against excessive
night driving until you develop the necessary reflexes to handle yourself in
challenging environments.  You can get yourself around town, but you lack the
refined strategies of more accomplished drivers.  In the world of Vim, you're
ready to learn about expert |navigation|.

==============================================================================
MOTION                                                   *learnvim-motion*

If you haven't read all of |motion.txt| yet, now would be a good time.  I
know, though, right? It's like 1300 lines long! That'd take hours to read, let
alone absorb...  Well, I could say the journey of a thousand miles begins with
the first step, or the secret to eating an elephant is to do so bite at a
time, but I won't.  Instead, I offer this path through the motion morass:

Operators & Text Objects ~

One of Vim's most powerful features is its ability to perform an action over a
specific portion of text.  In Vim speak, the action is called an |operator|
and the portion of text is called a |text-object|.  Get to know these
operators first:

|c|	(change) To delete a portion of text and enter insert mode immediately.
|d|	(delete) To delete a portion of text.
|y|	(yank) To copy a portion of text to Vim's internal clipboard (unnamed
	register,  |quotequote|)

And start using them with this motion:

|w|	(word) To operate from the current word under the cursor.  See
	|word-motions| for the others in this category.

EXERCISES ~

Copy the following line to your practice file (|setting-up-a-practice-file|):
>
  Angels and ministers of grace defend us.
<
Start with your cursor anywhere on that line in your practice buffer.
Type the following commands:

Commands:             Description: ~

1. 0                  - move to the first character on the line |0|
2. 3w                 - move forward three words (to "ministers")
3. cwVimmers<Esc>     - change the word "ministers" to "Vimmers"

                                                          *learnvim-marks*
Marks and Mark Motions~

Vim has marks (bookmarks) -- places you can quickly return to later.  See
|mark-motions| for a good coverage of the many available builtin marks and how
to set your own user marks.  Pay special attention to the difference between
lower-case marks {a-z} versus uppercase marks {A-Z}.  The two symbol marks, '
(quote) and ` (backquote) are very frequently used by accomplished vimmers.
Experiment with double-tapping these keys to see the difference in their
behaviour.

Law of the Instrument ~

"It is tempting, if the only tool you have is a hammer, to treat everything as
if it were a nail."                                   -- Abraham Maslow (1966)

Marks are great, but don't fall into the trap of over using your shiny new
toys for every problem at hand.  Take for example the operation of deleting
everything from the current cursor to a word you can see a few lines below in
your document.  Having just learned about marks, it might seem like a good idea
to do this:
>
    ma/foo<CR>d`a
<
But there's a much better way to do that:
>
    d/foo<CR>
<
You're going to jump to your practise file and try that out now, aren't you? ;)
See |setting-up-a-practice-file| if you haven't done so already.

Becoming an Expert Navigator~

What else is there to learn from |motion.txt|?

* |object-motions| 	Larger objects, like sentences, paragraphs and
			sections.
* |jump-motions|	Moving up and down the jump list as well as the
			related |change-list-jumps|.

There are many other motions in |motion.txt| than mentioned here.  It really
would pay to eventually work your way through that text.

==============================================================================

buffers (:ls, :b #, :b name, bn, bp, ctrl-6, etc)
windows (:only, c-w et al)
tags
:h ins-completion
the gx commands
registers
  - accessing "+ / "* for clipboard cut&paste
  - :g/xyz/y A   <-- appending to a register

:set paste and :set pastetoggle
or with :set mouse=a you can middle-click to paste without worrying about :set paste / nopaste / pastetoggle
Note: You need a vim compiled with X11 for access to the clipboard (echo has('X11')) will show 1 if you do.


Use |=| to reformat source code.

Use |:retab| to change between tabs and spaces.

Use abbreviations

Show -where- a setting was set
:verbose set sw?

Quickfix window
  - make
    :cn / :cp

Recipe: Setting Up A Practice File   *learnvim-setting-up-a-practice-file*
-------------------------------------------------------------------------{{{1
Problem: ~
There's just too much to learn with Vim, and every time you learn a new thing,
it seems that the last cool tip you learned slips from memory.

Solution: ~
Have a practise file.  It's a good idea to have a file you can jump to whenever
you want to test a newly learned Vim feature or continue to practise
previously learned material so that it doesn't fade away.  Here's a short
recipe on how to do that:

1. Choose a location, say: ~/.vim/practice.txt (Create the directory if it
   doesn't exist - you'll be using it in a later tip.)
2. Edit that file in Vim and type the following command:
>
   mP
<
That sets the global P mark (|learnvim-marks|) on line one of your practice
file.  The great thing about global marks ([A-Z]) is that not only do they
remember the line on which they were set (like local marks [a-z]), but they
also remember the file in which they were set.  So, now at any time when you're
in Vim and you'd like to jump to your practice file, just type:
>
   'P
<
You can use |ctrl-o| to jump back to where you came from when you've finished
practising.

Note: You should practice that a few times now so you get the hang of it.
      Open your ~/.vimrc file and then type   'P   to jump to your practice
      file, and then |ctrl-o| to jump back.  You could use   'P   to jump
      forward again, but this is a great opportunity to mention |ctrl-i| which
      is used to jump forward in the |jumplist| The astute reader will have
      noticed the help file that entry is located in and hence the importance
      placed upon reading |motion.txt| within the intermediate section of
      LearnVim.

Tip: You might like to set another global mark, 'V, for your ~/.vimrc file.

Now, type |ctrl-o| enough times until you get back to wherever it was you
jumped here from. :)
-------------------------------------------------------------------------1}}}

##############################################################################
MODERATE TOPICS                                 *lv_M* *learnvim-Moderate*

Competencies ~

On completing this section, you will:

|lv_M_I|	Be able to ...

==============================================================================

==============================================================================
MACROS                                          *lv_M_I* *learnvim-Macros*

1. Recording Macros                            *learnvim-recording-macros*

Macros are referred to as complex repeats in the Vim docs.  See |q| for the
mechanics of recording and then read on for playing back macros.

q{0-9a-zA-Z"} begins recording into the specified register.  All movements,
insertions, deletions, :ex commands, etc, are recorded until you press   q
again.  So, the command   qagUwWq   creates a macro that upper-cases the
current word (from the cursor forward) and then moves to the next WORD
(skipping whitespace and punctuation).  To run this macro on the next word, we
use the command   @a   and after that, to run it on another word we only need
to use   @@   (which repeats the last macro command, conveniently.)

If you've already got a partial command in a lettered register (a-z), you can
append more command to it by using the   q   command with the upper-case form
of the lettered register (A-Z)

There are quite a few other nifty tricks you can pull with macros, so I
implore you to read |:@|.

2. Recursive Macros                            *learnvim-recursive-macros*

Recursive macros are macros that call themselves.  Recursive macros are one way
to repeat a series of commands across multiple chunks of text all
automatically so you don't have to hit   @a   or even   @@   repeatedly to
execute the macro in all the places you need it to run.

Stop Condition~

If you don't provide an action within the body of your macro that causes an
error, the macro will run from the point of execution until the end of the
file.  This may be what you want; it may not.  To have it stop somewhere
specific, you'll have to ensure it errors at that point.  Using the    FfTt
commands are a common way to force a failed search.  If you use a pattern
search with the   /   command, you may need to use anchors to cause failures.

Clearing the Register Beforehand~

Because a recursive macro executes itself with the command   @a   (assuming
the macro is being recorded in register a), then at the point in time that the
macro is being created, the contents of register   a   before this recording
began will be inserted into the macro body when it sees   @a.  Unless you know
what you're doing, you probably want this to be empty.  Use   qaq   as a fast
way to empty register a.  By recording nothing into   a   , we effectively
empty it.  The subsequent   qa   in the command string   qaqqa   begins the
real recording.

Start in the Right Place~

To allow the recursive invocation of your macro to be actually useful, you
have to arrange for it to start in the right place.  This could be on the next
line, or at the next word, or next paragraph, or block, or...  etc.  The command
j0 moves down a line and to the first column of the screen, ready for the
subsequent recursive invocation with the command   @a   and switching off
recording with   q   hence   j0@aq

You're done recording.  Use   @a   to run it.
-------------------------------------------------------------------------------


bufdo
	:bufdo e    to re-read all open buffers from disk
windo
args and argdo
	:h key-notation

	paste into document with "ap to edit commands
	re-read into register with 0"ay$ when cursor is on the line of commands

:h expand()
:h filename-modifiers

maps
	map \x :tabe <c-r>=expand('%:h')<CR>/

:w !sudo tee %
:earlier + :later

reopen the file with different encodoings (when working with legacy files)
:e ++enc=cp1250

Perldo and Rubydo (taken from http://stackoverflow.com/questions/726894/what-are-the-dark-corners-of-vim-your-mom-)
:. perldo $_ = join ' ', reverse split
:. rubydo $_ += ' ' + (1..8).collect{('A'..'Z').to_a[rand 26]}.join



##############################################################################
ADVANCED TOPICS                                 *lv_A* *learnvim-Advanced*

Competencies ~

On completing this section, you will:

|lv_A_I|	Be able to create custom functions in VimScript

==============================================================================

custom commands
customising the menu in gvim
vim scripting
variable scope (g: s: a:, etc)
writing plugins
:h feature-list - know if we're running in vim or gvim  --  if has("gui_running")


##############################################################################
PLUGINS                                                 *learnvim-Plugins*

1. Plugin Management                          *learnvim-Plugin-Management*

Vim is awesome.  It has so much goodness baked right into it, it could very
well meet all your editing needs, right out of the box.  What it -also- has is
an awesome plugin system for extending every possible aspect of Vim you would
want.  http://www.vim.org/scripts is the canonical source of Vim plugins.

2. Recommended Plugins                      *learnvim-Recommended-Plugins*

* Matchit   |learnvim-matchit|
* Pathogen  |learnvim-pathogen|
* Surround  |learnvim-surround|

Matchit                                                 *learnvim-matchit*

The Matchit plugin provides extended |%| matching in Vim.

DOWNLOAD~

Matchit comes bundled with Vim, so there is nothing to download.  All you need
to do is enable it as described below.

INSTALL~
Put the following line in your ~/.vimrc file:
>
  runtime macros/matchit.vim
<


Pathogen                                               *learnvim-pathogen*

Created by the venerable, tpope, this plugin is a light-weight plugin manager
for Vim.  It allows you to install, test, upgrade and uninstall plugins much
more easily than the default Vim approach.

DOWNLOAD ~
>
  http://www.vim.org/scripts/script.php?script_id=2332
<
Or get it from github at:
>
  https://github.com/tpope/vim-pathogen
<

INSTALL ~

Install instructions are available from the same places above for downloading
this plugin.


Surround                                               *learnvim-surround*

Surround is another tpope creation used for adding, changing or deleting the
text surrounding a text-object.  Typical surround text includes quotes,
brackets and tags.

DOWNLOAD ~
>
  http://www.vim.org/scripts/script.php?script_id=1697
<
Or get it from github at:
>
  https://github.com/tpope/vim-surround
<

INSTALL ~

Install instructions are available from the same places above for downloading
this plugin.


3. Additional Plugins Worth Looking At       *learnvim-Additional-Plugins*

* NERD Tree - File browser
* NERD Commenter - Comment/uncomment code efficiently
* TagBar - Tag manager
* CSApprox - 88/256 colour terminal emulator for gui only colourschemes
* Snipmate - Snippets and Templates
* SearchParty - Extended Search, Replace, Highlight and Match commands
* Fanf,ingTastic; - FftT;, across lines


##############################################################################
EXTERNAL RESOURCES                           *learnvim-External-Resources*

Community ~

* Mailing Lists - http://www.vim.org/community.php
* IRC channel #vim on irc://irc.freenode.net

Tutorials ~

  Beginner ~

  * http://vim.wikia.com/wiki/Learn_to_use_help
  * http://vi-improved.org/tutorial.php
  * http://www.eng.hawaii.edu/Tutor/vi.html
  * http://blog.interlinked.org/tutorials/vim_tutorial.html
  * http://www.derekwyatt.org/vim/vim-tutorial-videos/vim-novice-tutorial-videos/

  Intermediate ~

  * http://www.derekwyatt.org/vim/vim-tutorial-videos/vim-intermediate-tutorial-videos/
  * http://www.moolenaar.net/habits.html

  Advanced ~

  * http://www.derekwyatt.org/vim/vim-tutorial-videos/vim-advanced-tutorial-videos/

Plugins ~

* www.vim.org/search.php
* https://github.com/vim-scripts

Unsorted ~

* http://vim.wikia.com/wiki/Vim_Tips_Wiki
* http://vim.wikia.com/wiki/Example_vimrc
* http://vim.wikia.com/wiki/New_to_Vim
* http://vim.wikia.com/wiki/Vim_IRC_FAQ
* http://vim.wikia.com/wiki/VimTip882
* http://vim.wikia.com/wiki/Vim_documentation
* http://vim.wikia.com/wiki/Creating_new_text_objects
* http://vimdoc.sourceforge.net/
* http://github.com/loota/vimfiles/blob/master/vim_usual_options.txt
* http://blog.interlinked.org/tutorials/vim_tutorial.html


##############################################################################
CREDITS                                                 *learnvim-Credits*

Thanks to the good people at FreeNode#vim for patiently answering my
questions, and their many great suggestions.

Special thanks to Zathrus for giving a detailed list of topics for this
tutorial.

The buffer, window and tab-page definitions were shamelessly copied from the
following resource created by godlygeek: http://vim.pastey.net/115548.

Large parts of the vimrc file were copied from the very helpful
http://vim.wikia.com (http://vim.wikia.com/wiki/Example_vimrc).  A more
annotated version of the vimrc options can be found at
http://github.com/loota/vimfiles/blob/master/vim_usual_options.txt.

 vim:noet:sw=8:nosmarttab:sts=0:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:fdm=marker:ft=help:norl:noro:modifiable:
